package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

type PreUrl struct {
	Url    string `json:"datos"` // url
	Client *http.Client
}

type AutoGenerated []struct {
	Origen     Origen     `json:"origen"`
	Elaborado  string     `json:"elaborado"`
	Nombre     string     `json:"nombre"`
	Provincia  string     `json:"provincia"`
	Prediccion Prediccion `json:"prediccion"`
	ID         int        `json:"id"`
	Version    float64    `json:"version"`
}
type Origen struct {
	Productor string `json:"productor"`
	Web       string `json:"web"`
	Enlace    string `json:"enlace"`
	Language  string `json:"language"`
	Copyright string `json:"copyright"`
	NotaLegal string `json:"notaLegal"`
}
type ProbPrecipitacion struct {
	Value   int    `json:"value"`
	Periodo string `json:"periodo"`
}
type CotaNieveProv struct {
	Value   string `json:"value"`
	Periodo string `json:"periodo"`
}
type EstadoCielo struct {
	Value       string `json:"value"`
	Periodo     string `json:"periodo"`
	Descripcion string `json:"descripcion"`
}
type Viento struct {
	Direccion string `json:"direccion"`
	Velocidad int    `json:"velocidad"`
	Periodo   string `json:"periodo"`
}
type RachaMax struct {
	Value   string `json:"value"`
	Periodo string `json:"periodo"`
}
type Dato struct {
	Value int `json:"value"`
	Hora  int `json:"hora"`
}
type Temperatura struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type SensTermica struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type HumedadRelativa struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type Dia struct {
	ProbPrecipitacion []ProbPrecipitacion `json:"probPrecipitacion"`
	CotaNieveProv     []CotaNieveProv     `json:"cotaNieveProv"`
	EstadoCielo       []EstadoCielo       `json:"estadoCielo"`
	Viento            []Viento            `json:"viento"`
	RachaMax          []RachaMax          `json:"rachaMax"`
	Temperatura       Temperatura         `json:"temperatura"`
	SensTermica       SensTermica         `json:"sensTermica"`
	HumedadRelativa   HumedadRelativa     `json:"humedadRelativa"`
	UvMax             int                 `json:"uvMax,omitempty"`
	Fecha             string              `json:"fecha"`
}
type Prediccion struct {
	Dia []Dia `json:"dia"`
}

type Daily struct {
	ProbPrecipitacio int       `json:"probPrecipitacion`
	TemperaturaMax   int       `json:"maxima"`
	TemperaturaMin   int       `json:"minima"`
	HumitatRelativa  int       `json:"humedadRelativa"`
	Time             time.Time `json:"-"`
}

func (g *Daily) GetForecasts() (*Daily, error) {
	result, _ := GetPreUrl()
	values, error := GetForecast(result)
	return values, error
}

func GetPreUrl() (string, error) {
	url := "https://opendata.aemet.es/opendata/api/prediccion/especifica/municipio/diaria/08001/?api_key=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzZXJnaXZhcXVlQGdtYWlsLmNvbSIsImp0aSI6ImY5NDA4MTllLTM2MmMtNDQ5OC1iMDA3LTY1ODZmOWYyOGUxZCIsImlzcyI6IkFFTUVUIiwiaWF0IjoxNjc4NzI3NTE4LCJ1c2VySWQiOiJmOTQwODE5ZS0zNjJjLTQ0OTgtYjAwNy02NTg2ZjlmMjhlMWQiLCJyb2xlIjoiIn0.rJSXW8pOwtr4T_MC1YsHWQtRJJHoiZS4YXvSJFhKwss"
	request, _ := http.NewRequest("GET", url, nil)
	request.Header.Add("cache-control", "no-cache")
	response, error := http.DefaultClient.Do(request)
	if error != nil {
		log.Println("Error connecting with AEMET")
		return "", error
	}

	defer response.Body.Close()
	body, error := ioutil.ReadAll(response.Body)
	if error != nil {
		log.Println("Error reading json")
		return "", error
	}

	preUrl := PreUrl{}
	error = json.Unmarshal(body, &preUrl)
	if error != nil {
		log.Println("Error unmarshal")
		return "", error
	}

	return preUrl.Url, error
}

func GetForecast(url string) (*Daily, error) {
	request, _ := http.NewRequest("GET", url, nil)
	request.Header.Add("cache-control", "no-cache")
	response, error := http.DefaultClient.Do(request)
	if error != nil {
		log.Println("Connetion with AEMTET Error", error)
		return nil, error
	}

	defer response.Body.Close()
	body, error := ioutil.ReadAll(response.Body)
	if error != nil {
		log.Println("Connetion with AEMTET Error", error)
		return nil, error
	}

	forecast := AutoGenerated{}
	var precipitacio, tempMax, tempMin, humidity int
	error = json.Unmarshal([]byte(body), &forecast)
	if error != nil {
		log.Println("Unmarshall Error", error)
		return nil, error
	}

	precipitacio = forecast[0].Prediccion.Dia[0].ProbPrecipitacion[0].Value
	tempMax = forecast[0].Prediccion.Dia[0].Temperatura.Maxima
	tempMin = forecast[0].Prediccion.Dia[0].Temperatura.Minima
	humidity = forecast[0].Prediccion.Dia[0].HumedadRelativa.Maxima
	var values = Daily{
		ProbPrecipitacio: precipitacio,
		TemperaturaMax:   tempMax,
		TemperaturaMin:   tempMin,
		HumitatRelativa:  humidity,
		Time:             time.Now(),
	}

	return &values, error
}
